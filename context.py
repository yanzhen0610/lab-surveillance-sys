from collections import defaultdict

class Context:
    def __init__(self, cameras):
        self.cameras = cameras
        self.data = defaultdict(lambda: None)
        self.last_processed_frame = defaultdict(lambda: None)
        self.processed_frame_updated = defaultdict(bool)

    """Get cameras array.
    """
    def get_cameras(self):
        return self.cameras

    """Get number of cameras.
    """
    def get_num_of_cameras(self):
        return len(self.cameras)

    """the argument `key` is indicating which camera
    """
    def get_camera_config(self, key):
        return self.cameras[key]['config']

    """the argument `key` is indicating which camera
    """
    def get_controller(self, key):
        return self.cameras[key]['controller']

    """the argument `key` is indicating which camera
    """
    def get_newest_frame(self, key):
        return self.cameras[key]['image_fetcher'].get_newest_frame()

    """the argument `key` is indicating which camera
    """
    def set_processed_frame(self, key, frame, result):
        self.processed_frame_updated[key] = True
        self.last_processed_frame[key] = (frame, result)

    """The argument `key` is indicating which camera.
    Get the last processed frame of given camera.
    Return tuple of `(frame, result)`.
    Results were generated by `Detector`.
    """
    def get_last_processed_frame(self, key):
        self.processed_frame_updated[key] = False
        return self.last_processed_frame[key]
    
    """Return true when a new processed frame was putted
    into context object else return false. It'll return
    false once `get_last_processed_frame()` has been called,
    and true once `set_processed_frame()` has been called.
    """
    def has_new_process_frame(self, key):
        return self.processed_frame_updated[key]
    
    """This method is for storing data.
    """
    def set_value(self, key, value):
        self.data[key] = value

    """This method is for getting data that's setted
    by `set_value()`.
    """
    def get_value(self, key):
        return self.data[key]

    """This method is for getting stored data.
    ```
    value = context[key]
    ```
    """
    def __getitem__(self, key):
        return self.data[key]

    """This method is for storing data.
    ```
    context[key] = value
    ```
    """
    def __setitem__(self, key, value):
        self.data[key] = value
